import{S as u,o as m}from"./index-Chgmd4Bq.js";const l={deviceInfo:"device_info_v1",deviceToken:"device_token_v1"},w=2500,E=5*60*1e3;class I{constructor(e){this.storage=e||new u}async getStoredDeviceInfo(){return await this.storage.load(l.deviceInfo)||null}async getStoredToken(){return await this.storage.load(l.deviceToken)||null}async saveDeviceInfo(e){await this.storage.save(l.deviceInfo,e)}async saveToken(e){await this.storage.save(l.deviceToken,e)}async clearToken(){await this.storage.save(l.deviceToken,null)}isExpired(e){const t=Date.parse(e);return Number.isNaN(t)?!0:Date.now()>=t-5e3}async getValidTokenOrRefresh(e){const t=await this.getStoredToken();if(!t)return null;if(!this.isExpired(t.expiresAt))return t;try{const n=await this.refresh(e,t.token);if(n)return n}catch(n){console.warn("[DeviceAuth] token refresh failed:",n)}return null}async registerDevice(e){const t=await fetch(`${e}/api/devices/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({}),credentials:"include"});if(!t.ok)throw new Error(`registerDevice failed: ${t.status}`);const n=await t.json(),a={deviceId:n.deviceId,code:n.code,expiresAt:n.expiresAt};return await this.saveDeviceInfo(a),a}async getOrRegisterDevice(e){const t=await this.getStoredDeviceInfo();return t||this.registerDevice(e)}buildSignInUrl(e,t){const n=new URL(`${e.replace(/\/$/,"")}/sign-in`);return n.searchParams.set("source","extension"),n.searchParams.set("code",t),n.toString()}async exchange(e,t,n){const a=await fetch(`${e}/api/devices/exchange`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({deviceId:t,code:n})});if(a.status===404||a.status===425)return null;if(!a.ok)throw new Error(`exchange failed: ${a.status}`);const s=await a.json();return await this.saveToken(s),s}async refresh(e,t){const n=await fetch(`${e}/api/devices/refresh`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({})});if(!n.ok)return null;const a=await n.json();return await this.saveToken(a),a}async authorizedFetch(e,t,n){const a=await this.getValidTokenOrRefresh(e);if(!a)throw new Error("not_authenticated");const s=t.startsWith("http")?t:`${e.replace(/\/$/,"")}${t}`,o=new Headers((n==null?void 0:n.headers)||{});return o.set("Authorization",`Bearer ${a.token}`),o.set("Content-Type",o.get("Content-Type")||"application/json"),fetch(s,{...n,headers:o})}async pollExchangeUntilLinked(e,t,n,a){const s=(a==null?void 0:a.intervalMs)??w,o=(a==null?void 0:a.maxWaitMs)??E,v=Date.now();for(;;){if(Date.now()-v>o)return null;try{const r=await this.exchange(e,t,n);if(r)return r}catch(r){console.warn("[DeviceAuth] exchange error (will retry):",r)}await new Promise(r=>setTimeout(r,s))}}}const f=new I;class c{constructor(){this.storageKey="gamma_auth_state"}static getInstance(){return c.instance||(c.instance=new c),c.instance}getState(){if(typeof window>"u")return{state:"LOGGED_OUT"};const e=localStorage.getItem(this.storageKey);if(!e)return{state:"LOGGED_OUT"};try{const t=JSON.parse(e);return t.deviceToken&&t.userId?t.state="AUTHENTICATED":t.pairingCode&&t.deviceId?t.state="PAIRING_IN_PROGRESS":t.deviceId?t.state="DEVICE_REGISTERED":t.state="LOGGED_OUT",t}catch{return{state:"LOGGED_OUT"}}}setState(e){if(typeof window>"u")return;const n={...this.getState(),...e};n.deviceToken&&n.userId?n.state="AUTHENTICATED":n.pairingCode&&n.deviceId?n.state="PAIRING_IN_PROGRESS":n.deviceId?n.state="DEVICE_REGISTERED":n.state="LOGGED_OUT",localStorage.setItem(this.storageKey,JSON.stringify(n)),window.dispatchEvent(new CustomEvent("gamma-auth-changed",{detail:n}))}isAuthenticated(){const{state:e}=this.getState();return e==="AUTHENTICATED"}logout(){typeof window>"u"||(localStorage.removeItem(this.storageKey),localStorage.removeItem("clerk_session_token"),localStorage.removeItem("clerk_jwt_token"),localStorage.removeItem("device_id"),localStorage.removeItem("device_token"),localStorage.removeItem("pairing_code"),window.dispatchEvent(new CustomEvent("gamma-auth-logout")),this.setState({state:"LOGGED_OUT"}))}resetForTesting(){this.logout(),typeof window<"u"&&(sessionStorage.clear(),document.cookie.split(";").forEach(e=>{document.cookie=e.replace(/^ +/,"").replace(/=.*/,"=;expires="+new Date().toUTCString()+";path=/")})),console.log("[Auth] Complete reset for testing completed")}registerDevice(e,t){this.setState({deviceId:e,pairingCode:t,state:t?"PAIRING_IN_PROGRESS":"DEVICE_REGISTERED"})}authenticate(e,t,n,a){this.setState({userId:e,userEmail:t,deviceToken:n,clerkToken:a,state:"AUTHENTICATED"})}}const C=c.getInstance();typeof window<"u"&&(window.gammaAuth=C);var A={};class b{constructor(e){this.clerk=null,this.listeners=new Set,this.authState={isAuthenticated:!1,user:null,session:null,lastChecked:new Date().toISOString()},this.storage=e||new u}async initialize(){console.log("[AuthManager] initialize() called");const e=A.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;if(!e){console.error("[AuthManager] Clerk publishable key not found.");return}try{this.clerk=new m(e),console.log("[AuthManager] Clerk instance created"),await this.clerk.load(),console.log("[AuthManager] Clerk loaded"),this.clerk.addListener(t=>{this.handleClerkStateChange(t)}),this.updateAuthState(),console.log("[AuthManager] Initialization complete")}catch(t){console.error("[AuthManager] Failed to load Clerk:",t),this.clerk=null}}updateAuthState(){var n,a,s;if(!this.clerk)return;const e=this.clerk.user,t=this.clerk.session;this.authState={isAuthenticated:!!e&&!!t,user:e?{id:e.id,email:((n=e.primaryEmailAddress)==null?void 0:n.emailAddress)||"",name:e.fullName||"",createdAt:((a=e.createdAt)==null?void 0:a.toISOString())||new Date().toISOString()}:null,session:t?{userId:t.user.id,token:((s=t.lastActiveToken)==null?void 0:s.getRawString())||"",expiresAt:t.expireAt.toISOString(),isActive:t.status==="active"}:null,lastChecked:new Date().toISOString()},this.emitAuthEvent({type:this.authState.isAuthenticated?"login":"logout",user:this.authState.user,timestamp:new Date().toISOString()})}handleClerkStateChange(e){console.log("[AuthManager] Clerk state changed:",e),this.updateAuthState()}async isAuthenticated(){const e=await f.getStoredToken();return e&&e.token?!0:this.authState.isAuthenticated}async getCurrentUser(){return this.authState.user}async getAuthState(){return{...this.authState}}async login(){console.log("[AuthManager] login() delegated to sidebar pairing flow.")}async logout(){await f.clearToken(),this.updateAuthState()}async getUserPreferences(){const e={theme:"auto",autoSync:!1,syncInterval:30,exportFormat:"xlsx",notifications:!1};try{const t=await this.storage.load("user_preferences");if(t&&typeof t=="object")return{...e,...t}}catch(t){console.warn("[AuthManager] Could not load user preferences:",t)}return e}async updateUserPreferences(e){try{const n={...await this.getUserPreferences(),...e};await this.storage.save("user_preferences",n),this.emitAuthEvent({type:"auth_check",timestamp:new Date().toISOString()})}catch(t){throw console.error("[AuthManager] Could not update user preferences:",t),t}}addEventListener(e){this.listeners.add(e)}removeEventListener(e){this.listeners.delete(e)}emitAuthEvent(e){this.listeners.forEach(t=>{try{t(e)}catch(n){console.error("[AuthManager] Error in auth event listener:",n)}})}}const d=new b,g={authentication:!0,userProfiles:!1,sessionManagement:!1,cloudSync:!0,autoSync:!1,syncQueue:!1,conflictResolution:!1,realTimeSync:!1,collaborativeEditing:!1,liveUpdates:!1,advancedSearch:!1,dataVersioning:!1,exportHistory:!1,bulkOperations:!1,offlineMode:!0,localStorage:!0,exportFeatures:!0,basicUI:!0,debugMode:!0,loggingEnabled:!0,performanceMetrics:!1},h={environment:"development",apiBaseUrl:"http://localhost:3000",webBaseUrl:"http://localhost:3000",enableAnalytics:!1,logLevel:"debug",maxStorageSize:50,syncIntervalMs:3e4},k={environment:"production",apiBaseUrl:"https://productory-powerups.netlify.app",webBaseUrl:"https://productory-powerups.netlify.app",enableAnalytics:!1,logLevel:"info",maxStorageSize:50,syncIntervalMs:3e4};function O(){return typeof __BUILD_ENV__<"u"&&__BUILD_ENV__==="production"?k:h}const p=O(),y={theme:"auto",language:"en",exportFormat:"xlsx",notifications:!1,autoSave:!0,syncOnStartup:!0};class T{constructor(e){this.config=null,this.listeners=new Set,this.storage=e||new u}async initialize(){try{const e=await this.storage.load("app_config_v3");e&&this.isValidConfig(e)?(this.config=this.applyMigrationsAndMergeDefaults(e),await this.saveConfig(),console.log("[ConfigManager] Loaded existing configuration (with migrations/defaults applied)")):(this.config=this.createDefaultConfig(),await this.saveConfig(),console.log("[ConfigManager] Created default configuration")),this.notifyListeners()}catch(e){console.error("[ConfigManager] Failed to initialize:",e),this.config=this.createDefaultConfig()}}getConfig(){return this.config?{...this.config}:this.createDefaultConfig()}isFeatureEnabled(e){return this.getConfig().features[e]||!1}async updateFeatureFlags(e){const t=this.getConfig(),n={},a=["debugMode","loggingEnabled","performanceMetrics"];for(const[s,o]of Object.entries(e))a.includes(s)&&typeof o=="boolean"?n[s]=o:a.includes(s)?console.warn(`[ConfigManager] Feature '${s}' must be boolean value`):console.warn(`[ConfigManager] Feature '${s}' cannot be modified in Sprint 0`);t.features={...t.features,...n},t.lastUpdated=new Date().toISOString(),this.config=t,await this.saveConfig(),this.notifyListeners()}async updateUserConfig(e){const t=this.getConfig();t.user={...t.user,...e},t.lastUpdated=new Date().toISOString(),this.config=t,await this.saveConfig(),this.notifyListeners()}async updateEnvironmentConfig(e){const t=this.getConfig(),n={},a=["logLevel","maxStorageSize","enableAnalytics","syncIntervalMs"];for(const[s,o]of Object.entries(e))a.includes(s)?n[s]=o:console.warn(`[ConfigManager] Environment setting '${s}' cannot be modified in Sprint 0`);t.environment={...t.environment,...n},t.lastUpdated=new Date().toISOString(),this.config=t,await this.saveConfig(),this.notifyListeners()}getUIFeatureStatus(){const e=this.getConfig(),t={};for(const[n,a]of Object.entries(e.features)){let s=a?"Feature enabled":"Feature disabled";a||(["authentication","userProfiles","sessionManagement"].includes(n)?s="Available in Sprint 1":["cloudSync","autoSync","syncQueue","conflictResolution"].includes(n)?s="Available in Sprint 2":["realTimeSync","collaborativeEditing","liveUpdates"].includes(n)?s="Available in Sprint 3":["advancedSearch","dataVersioning","exportHistory","bulkOperations"].includes(n)&&(s="Available in Sprint 4")),t[n]={enabled:a,reason:s}}return t}addConfigListener(e){this.listeners.add(e)}removeConfigListener(e){this.listeners.delete(e)}async resetToDefaults(){this.config=this.createDefaultConfig(),await this.saveConfig(),this.notifyListeners(),console.log("[ConfigManager] Configuration reset to defaults")}getFeatureConfig(e){const t=this.getConfig();return{storage:{maxSize:t.environment.maxStorageSize,enableSync:t.features.cloudSync,localOnly:!t.features.cloudSync},auth:{enabled:t.features.authentication,sessionTimeout:36e5,requireAuth:!1},sync:{enabled:t.features.autoSync,interval:t.environment.syncIntervalMs,queueEnabled:t.features.syncQueue},ui:{theme:t.user.theme,language:t.user.language,notifications:t.user.notifications},export:{enabled:t.features.exportFeatures,defaultFormat:t.user.exportFormat,historyEnabled:t.features.exportHistory}}[e]||null}createDefaultConfig(){return console.log("[ConfigManager] Creating a new default configuration object."),{features:{...g},environment:{...p},user:{...y},version:"0.0.7",lastUpdated:new Date().toISOString()}}applyMigrationsAndMergeDefaults(e){const t={...e,features:{...g,...e.features},environment:{...p,...e.environment},user:{...y,...e.user},version:e.version||"0.0.7",lastUpdated:new Date().toISOString()};return t.features.authentication||(t.features.authentication=!0),t}async saveConfig(){if(this.config)try{await this.storage.save("app_config_v3",this.config)}catch(e){throw console.error("[ConfigManager] Failed to save configuration:",e),e}}isValidConfig(e){return e!==null&&typeof e=="object"&&"features"in e&&"environment"in e&&"user"in e&&"version"in e&&"lastUpdated"in e}notifyListeners(){this.config&&this.listeners.forEach(e=>{try{e(this.config)}catch(t){console.error("[ConfigManager] Error in config listener:",t)}})}}const _=new T;let S=!1,D=!1;document.addEventListener("DOMContentLoaded",async function(){console.log("[POPUP] DOMContentLoaded fired"),await P(),U(),L()});async function P(){try{console.log("[POPUP] Initializing Sprint 0 infrastructure..."),await _.initialize(),D=!0,await d.initialize(),S=!0,await M(),console.log("[POPUP] Sprint 0 infrastructure ready - working in offline mode")}catch(i){console.error("[POPUP] Failed to initialize infrastructure:",i)}}function U(){const i=document.getElementById("open-sidebar-btn"),e=document.getElementById("sidebar-status");i&&(i.onclick=async function(){if(chrome.sidePanel&&chrome.sidePanel.open)try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});await chrome.sidePanel.open({windowId:t.windowId})}catch(t){e&&(e.textContent="Failed to open side panel: "+t)}else e&&(e.textContent="Side Panel API not available in this version of Chrome.")})}function L(){const i=document.getElementById("popup-login-btn"),e=document.getElementById("popup-dashboard-btn");i&&i.addEventListener("click",async()=>{console.log("[POPUP] Login clicked - Sprint 0 stub"),await d.login()}),e&&e.addEventListener("click",()=>{console.log("[POPUP] Dashboard clicked - Sprint 0 stub")});const t=document.getElementById("popup-sync-now-btn");t&&t.addEventListener("click",async()=>{console.log("[POPUP] Sync now clicked - Sprint 0 stub")});const n=document.getElementById("popup-settings-btn");n&&n.addEventListener("click",()=>{console.log("[POPUP] Settings clicked - Sprint 0 stub")}),console.log("[POPUP] Infrastructure event listeners ready")}async function M(){try{if(!S)return;const i=d.getUIAuthStatus(),e=document.getElementById("popup-auth-icon"),t=document.getElementById("popup-auth-text");e&&t&&(e.textContent=i.status==="offline"?"🔒":"✅",t.textContent=i.message);const n=document.getElementById("popup-sync-indicator");n&&(n.className=`sync-indicator ${i.status}`)}catch(i){console.warn("[POPUP] Could not update auth status:",i)}}
