console.log("[BACKGROUND] Script loaded");const c={};let s=null,r=null;const a={contentScripts:new Map,sidebarLastPing:null,healthCheckInterval:null},l={maxRetries:5,baseDelayMs:1e3,maxDelayMs:8e3};async function d(e,t=1){console.log(`[BACKGROUND] Attempting content script injection for tab ${e}, attempt ${t}`);try{const o=await chrome.tabs.get(e);return!o||!o.url||!o.url.startsWith("https://gamma.app/")?(console.log(`[BACKGROUND] Tab ${e} is not valid for injection`),{success:!1,reason:"invalid_tab"}):(await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}),console.log(`[BACKGROUND] Content script injected successfully for tab ${e}`),{success:!0})}catch(o){if(console.error(`[BACKGROUND] Injection attempt ${t} failed for tab ${e}:`,o),t>=l.maxRetries)return console.error(`[BACKGROUND] Max injection retries (${l.maxRetries}) reached for tab ${e}`),{success:!1,reason:"max_retries_reached",error:o};const n=Math.min(l.baseDelayMs*Math.pow(2,t-1),l.maxDelayMs);return console.log(`[BACKGROUND] Retrying injection for tab ${e} in ${n}ms`),await new Promise(i=>setTimeout(i,n)),d(e,t+1)}}function h(){a.healthCheckInterval&&clearInterval(a.healthCheckInterval),a.healthCheckInterval=setInterval(()=>{const e=Date.now(),t=15e3;for(const[o,n]of a.contentScripts.entries())e-n.lastPing>t&&(console.warn(`[BACKGROUND] Content script for tab ${o} appears unhealthy, attempting recovery`),u(o));s&&a.sidebarLastPing&&e-a.sidebarLastPing>t&&(console.warn("[BACKGROUND] Sidebar connection appears unhealthy"),m())},1e4)}async function u(e){console.log(`[BACKGROUND] Attempting to recover connection for tab ${e}`),a.contentScripts.delete(e),delete c[e];const t=await d(e);!t.success&&s&&s.postMessage({type:"connection-error",message:`Unable to connect to the Gamma presentation. ${t.reason==="max_retries_reached"?"Please refresh the page.":"Please try refreshing the page."}`,tabId:e,canRetry:t.reason!=="invalid_tab"})}function g(e,t=null){const o=Date.now();e==="content-script"&&t?a.contentScripts.has(t)?a.contentScripts.get(t).lastPing=o:a.contentScripts.set(t,{lastPing:o,retryCount:0}):e==="sidebar"&&(a.sidebarLastPing=o)}function m(){s&&s.postMessage({type:"connection-warning",message:"Connection health check failed. Extension may need refresh."})}chrome.runtime.onConnect.addListener(e=>{var t,o;if(console.log("[BACKGROUND] New connection:",e.name,"from:",e.sender),e.name==="content-script"){const n=(o=(t=e.sender)==null?void 0:t.tab)==null?void 0:o.id;n&&(c[n]=e,console.log(`[BACKGROUND] Content script connected for tab ${n}.`),g("content-script",n),e.onDisconnect.addListener(()=>{delete c[n],a.contentScripts.delete(n),console.log(`[BACKGROUND] Content script for tab ${n} disconnected.`)}),e.onMessage.addListener(i=>{g("content-script",n),s&&(n===r?(console.log(`[BACKGROUND] Forwarding message from active content script (tab ${n}) to sidebar:`,i),s.postMessage({...i,tabId:n})):console.log(`[BACKGROUND] Ignoring message from inactive tab ${n}.`))}))}else e.name==="sidebar"&&(s=e,console.log("[BACKGROUND] Sidebar connected."),g("sidebar"),h(),s.onDisconnect.addListener(()=>{s=null,a.sidebarLastPing=null,console.log("[BACKGROUND] Sidebar disconnected."),a.healthCheckInterval&&(clearInterval(a.healthCheckInterval),a.healthCheckInterval=null)}),s.onMessage.addListener(n=>{if(console.log("[BACKGROUND] Message from sidebar:",n),g("sidebar"),n.type==="get-slides"&&r){const i=c[r];i?(console.log(`[BACKGROUND] Forwarding get-slides to content script for active tab ${r}.`),i.postMessage(n)):(console.log(`[BACKGROUND] No content script for active tab ${r}, attempting injection.`),f(r))}else n.type==="retry-connection"&&n.tabId&&(console.log(`[BACKGROUND] Manual retry requested for tab ${n.tabId}`),f(n.tabId))}),r&&p(r))});async function f(e){s&&s.postMessage({type:"connection-status",status:"connecting",message:"Connecting to presentation..."});const t=await d(e);t.success?(console.log(`[BACKGROUND] Content script injection successful for tab ${e}`),setTimeout(()=>{const o=c[e];o&&o.postMessage({type:"get-slides"})},1e3)):(console.error(`[BACKGROUND] Content script injection failed for tab ${e}:`,t),s&&s.postMessage({type:"connection-error",message:t.reason==="max_retries_reached"?"Unable to connect to Gamma presentation. Please refresh the page.":t.reason==="invalid_tab"?"This extension only works on gamma.app presentations.":"Connection failed. Please try refreshing the page.",canRetry:t.reason!=="invalid_tab",tabId:e}))}function p(e){if(!s){console.log("[BACKGROUND] No sidebar to update.");return}chrome.tabs.get(e,async t=>{if(chrome.runtime.lastError){console.error(`[BACKGROUND] Error getting tab info: ${chrome.runtime.lastError.message}`),s.postMessage({type:"connection-error",message:"Error accessing tab. Please try refreshing.",canRetry:!0,tabId:e});return}t&&t.url&&t.url.startsWith("https://gamma.app/")?(console.log(`[BACKGROUND] Active tab is a Gamma tab: ${e}`),c[e]?s.postMessage({type:"gamma-tab-activated",tabId:e}):(console.log(`[BACKGROUND] No content script found for Gamma tab ${e}, attempting injection`),await f(e))):(console.log(`[BACKGROUND] Active tab is not a Gamma tab: ${e}`),s.postMessage({type:"wrong-domain",tabUrl:(t==null?void 0:t.url)||"",tabId:e}))})}chrome.tabs.onActivated.addListener(e=>{console.log(`[BACKGROUND] Tab activated: ${e.tabId}`),r=e.tabId,p(r)});chrome.runtime.onInstalled.addListener(()=>{chrome.tabs.query({active:!0,currentWindow:!0},e=>{e.length>0&&(r=e[0].id,console.log(`[BACKGROUND] Extension installed/updated. Initial active tab: ${r}`))})});setInterval(()=>{if(r&&s){console.log(`[BACKGROUND] Heartbeat: Requesting slide update from active tab ${r}`);const e=c[r];e&&e.postMessage({type:"get-slides"})}},5e3);
