console.log("[BACKGROUND] Script loaded");const c={};let a=null,i=null;const o={contentScripts:new Map,sidebarLastPing:null,sidebarFailureCount:0,healthCheckInterval:null},l={maxRetries:5,baseDelayMs:1e3,maxDelayMs:8e3};async function g(e,t=1){console.log(`[BACKGROUND] Attempting content script injection for tab ${e}, attempt ${t}`);try{const s=await chrome.tabs.get(e);return!s||!s.url||!s.url.startsWith("https://gamma.app/")?(console.log(`[BACKGROUND] Tab ${e} is not valid for injection`),{success:!1,reason:"invalid_tab"}):(await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}),console.log(`[BACKGROUND] Content script injected successfully for tab ${e}`),{success:!0})}catch(s){if(console.error(`[BACKGROUND] Injection attempt ${t} failed for tab ${e}:`,s),t>=l.maxRetries)return console.error(`[BACKGROUND] Max injection retries (${l.maxRetries}) reached for tab ${e}`),{success:!1,reason:"max_retries_reached",error:s};const n=Math.min(l.baseDelayMs*Math.pow(2,t-1),l.maxDelayMs);return console.log(`[BACKGROUND] Retrying injection for tab ${e} in ${n}ms`),await new Promise(r=>setTimeout(r,n)),g(e,t+1)}}function C(){o.healthCheckInterval&&clearInterval(o.healthCheckInterval),o.healthCheckInterval=setInterval(()=>{const e=Date.now(),t=15e3,s=5;for(const[n,r]of o.contentScripts.entries())e-r.lastPing>t?(r.failureCount=(r.failureCount||0)+1,console.log(`[BACKGROUND] Content script for tab ${n} missed ping (failure ${r.failureCount}/${s})`),r.failureCount>=s&&(console.warn(`[BACKGROUND] Content script for tab ${n} unhealthy after ${r.failureCount} failures, attempting recovery`),p(n))):r.failureCount>0&&(console.log(`[BACKGROUND] Content script for tab ${n} recovered, resetting failure count`),r.failureCount=0);a&&o.sidebarLastPing&&e-o.sidebarLastPing>t?(o.sidebarFailureCount++,console.log(`[BACKGROUND] Sidebar missed ping (failure ${o.sidebarFailureCount}/${s})`),o.sidebarFailureCount>=s&&(console.warn(`[BACKGROUND] Sidebar connection unhealthy after ${o.sidebarFailureCount} failures`),h())):a&&o.sidebarLastPing&&o.sidebarFailureCount>0&&(console.log("[BACKGROUND] Sidebar recovered, resetting failure count"),o.sidebarFailureCount=0)},1e4)}async function p(e){console.log(`[BACKGROUND] Attempting to recover connection for tab ${e}`),o.contentScripts.delete(e),delete c[e];const t=await g(e);!t.success&&a&&a.postMessage({type:"connection-error",message:`Unable to connect to the Gamma presentation. ${t.reason==="max_retries_reached"?"Please refresh the page.":"Please try refreshing the page."}`,tabId:e,canRetry:t.reason!=="invalid_tab"})}function u(e,t=null){const s=Date.now();if(e==="content-script"&&t)if(!o.contentScripts.has(t))o.contentScripts.set(t,{lastPing:s,retryCount:0,failureCount:0});else{const n=o.contentScripts.get(t);n.lastPing=s,n.failureCount>0&&(n.failureCount=0)}else e==="sidebar"&&(o.sidebarLastPing=s,o.sidebarFailureCount>0&&(o.sidebarFailureCount=0))}function h(){a&&a.postMessage({type:"connection-warning",message:"Connection health check failed. Extension may need refresh."})}chrome.runtime.onConnect.addListener(e=>{var t,s;if(console.log("[BACKGROUND] New connection:",e.name,"from:",e.sender),e.name==="content-script"){const n=(s=(t=e.sender)==null?void 0:t.tab)==null?void 0:s.id;n&&(c[n]=e,console.log(`[BACKGROUND] Content script connected for tab ${n}.`),u("content-script",n),e.onDisconnect.addListener(()=>{delete c[n],o.contentScripts.delete(n),console.log(`[BACKGROUND] Content script for tab ${n} disconnected.`)}),e.onMessage.addListener(r=>{u("content-script",n),a&&(n===i?(console.log(`[BACKGROUND] Forwarding message from active content script (tab ${n}) to sidebar:`,r),a.postMessage({...r,tabId:n})):console.log(`[BACKGROUND] Ignoring message from inactive tab ${n}.`))}))}else e.name==="sidebar"&&(a=e,console.log("[BACKGROUND] Sidebar connected."),u("sidebar"),C(),a.onDisconnect.addListener(()=>{a=null,o.sidebarLastPing=null,console.log("[BACKGROUND] Sidebar disconnected."),o.healthCheckInterval&&(clearInterval(o.healthCheckInterval),o.healthCheckInterval=null)}),a.onMessage.addListener(n=>{if(console.log("[BACKGROUND] Message from sidebar:",n),u("sidebar"),n.type==="get-slides"&&i){const r=c[i];r?(console.log(`[BACKGROUND] Forwarding get-slides to content script for active tab ${i}.`),r.postMessage(n)):(console.log(`[BACKGROUND] No content script for active tab ${i}, attempting injection.`),f(i))}else n.type==="retry-connection"&&n.tabId&&(console.log(`[BACKGROUND] Manual retry requested for tab ${n.tabId}`),f(n.tabId))}),i&&d(i))});async function f(e){a&&a.postMessage({type:"connection-status",status:"connecting",message:"Connecting to presentation..."});const t=await g(e);t.success?(console.log(`[BACKGROUND] Content script injection successful for tab ${e}`),setTimeout(()=>{const s=c[e];s&&s.postMessage({type:"get-slides"})},1e3)):(console.error(`[BACKGROUND] Content script injection failed for tab ${e}:`,t),a&&a.postMessage({type:"connection-error",message:t.reason==="max_retries_reached"?"Unable to connect to Gamma presentation. Please refresh the page.":t.reason==="invalid_tab"?"This extension only works on gamma.app presentations.":"Connection failed. Please try refreshing the page.",canRetry:t.reason!=="invalid_tab",tabId:e}))}function d(e){if(!a){console.log("[BACKGROUND] No sidebar to update.");return}chrome.tabs.get(e,async t=>{if(chrome.runtime.lastError){console.error(`[BACKGROUND] Error getting tab info: ${chrome.runtime.lastError.message}`),a.postMessage({type:"connection-error",message:"Error accessing tab. Please try refreshing.",canRetry:!0,tabId:e});return}t&&t.url&&t.url.startsWith("https://gamma.app/")?(console.log(`[BACKGROUND] Active tab is a Gamma tab: ${e}`),c[e]?a.postMessage({type:"gamma-tab-activated",tabId:e}):(console.log(`[BACKGROUND] No content script found for Gamma tab ${e}, attempting injection`),await f(e))):(console.log(`[BACKGROUND] Active tab is not a Gamma tab: ${e}`),a.postMessage({type:"wrong-domain",tabUrl:(t==null?void 0:t.url)||"",tabId:e}))})}chrome.tabs.onActivated.addListener(e=>{console.log(`[BACKGROUND] Tab activated: ${e.tabId}`),i=e.tabId,d(i)});chrome.runtime.onInstalled.addListener(()=>{chrome.tabs.query({active:!0,currentWindow:!0},e=>{e.length>0&&(i=e[0].id,console.log(`[BACKGROUND] Extension installed/updated. Initial active tab: ${i}`))})});setInterval(()=>{if(i&&a){console.log(`[BACKGROUND] Heartbeat: Requesting slide update from active tab ${i}`);const e=c[i];e&&e.postMessage({type:"get-slides"})}},5e3);
