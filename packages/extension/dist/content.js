console.log("[CONTENT] Script loaded on:",window.location.href);function w(t,s){let o;return function(...e){clearTimeout(o),o=window.setTimeout(()=>t(...e),s)}}function O(){console.log("[CONTENT] extractSlides() called");const t=[],s=new Set,o=document.querySelectorAll("div.card-wrapper[data-card-id]");if(console.log("[CONTENT] Found card wrappers with data-card-id:",o.length),o.length===0){console.log("[CONTENT] No card-wrapper elements found, trying alternative selectors...");const e=document.querySelectorAll("[data-card-id]");console.log("[CONTENT] Elements with data-card-id:",e.length);const l=document.querySelectorAll('.card, .slide, [class*="card"], [class*="slide"]');console.log("[CONTENT] Slide-like elements:",l.length),e.length>0&&(console.log("[CONTENT] Sample card element:",e[0]),console.log("[CONTENT] Sample card classes:",e[0].className),console.log("[CONTENT] Sample card parent:",e[0].parentElement)),console.log("[CONTENT] Document body classes:",document.body.className),console.log("[CONTENT] Looking for gamma-specific selectors...");const r=document.querySelectorAll('[class*="gamma"], [id*="gamma"], [data-*="gamma"]');console.log("[CONTENT] Gamma-related elements:",r.length)}return console.log("[CONTENT] Document body:",document.body),console.log("[CONTENT] All divs with data-card-id:",document.querySelectorAll("[data-card-id]").length),console.log("[CONTENT] All elements with class card-wrapper:",document.querySelectorAll(".card-wrapper").length),o.length===0&&(console.log("[CONTENT] No slides found. Let me check what IS in the DOM:"),console.log("[CONTENT] Body innerHTML (first 1000 chars):",document.body.innerHTML.substring(0,1e3)),console.log("[CONTENT] All iframes:",document.querySelectorAll("iframe")),window!==window.top?(console.log("[CONTENT] We are inside an iframe"),console.log("[CONTENT] Frame URL:",window.location.href),console.log("[CONTENT] Parent URL:",document.referrer)):console.log("[CONTENT] We are in the main window")),o.forEach((e,l)=>{var r;try{const n=e.getAttribute("data-card-id");if(!n||s.has(n))return;s.add(n);const d=parseInt(e.getAttribute("data-card-depth")||"0",10),g=e.querySelector('.node-heading .heading [data-node-view-content-inner="heading"]'),f=g&&((r=g.textContent)==null?void 0:r.trim())||"",i=[];e.querySelectorAll(".node-paragraph, .node-image, .node-link, .node-list").forEach(c=>{var m;if(c.classList.contains("node-paragraph"))i.push({type:"paragraph",text:((m=c.textContent)==null?void 0:m.trim())||"",subItems:[]});else if(c.classList.contains("node-image")){const a=c.querySelector("img");a&&a.src&&i.push({type:"image",text:a.src,subItems:[]})}else if(c.classList.contains("node-link")){const a=c.querySelector("a");a&&a.href&&i.push({type:"link",text:a.href,subItems:[]})}else c.classList.contains("node-list")&&c.querySelectorAll('div[data-node-view-content-inner="list-item"]').forEach(T=>{var p,E;const u=((E=(p=T.childNodes[0])==null?void 0:p.textContent)==null?void 0:E.trim())||"",N=[],h=T.querySelector('div[data-node-view-content-inner="list"]');h&&h.querySelectorAll('div[data-node-view-content-inner="list-item"]').forEach(y=>{var C;N.push(((C=y.textContent)==null?void 0:C.trim())||"")}),u&&i.push({type:"list_item",text:u,subItems:N})})}),t.push({id:n,title:f,content:i,order:l,level:d,presentationUrl:window.location.href})}catch(n){console.error(`Error processing slide ${l}:`,n)}}),t}function S(t){console.log("[CONTENT] Setting up MutationObserver");const s=w(()=>{console.log("[CONTENT] DOM change detected, re-sending slides."),t()},250);new MutationObserver(e=>{s()}).observe(document.body,{childList:!0,subtree:!0,attributes:!0,characterData:!0})}if(window.location.hostname.endsWith("gamma.app")){console.log("[CONTENT] On gamma.app, initializing...");let t=null,s,o=[];const e=()=>{try{t=chrome.runtime.connect({name:"content-script"}),console.log("[CONTENT] Port created:",t),t.onDisconnect.addListener(()=>{console.error("[CONTENT] Disconnected from background:",chrome.runtime.lastError),t=null,s||(s=window.setTimeout(()=>{console.log("[CONTENT] Attempting to reconnect..."),s=void 0,e()},2e3))});const l=(r=!1)=>{if(!t){console.error("[CONTENT] No port available, cannot send slides");return}const n=O(),d=JSON.stringify(o)!==JSON.stringify(n);o=n,console.log("[CONTENT] Sending slides to background:",n.length,"slides",d?"(changes detected)":"(heartbeat response)");try{t.postMessage({type:"slide-data",slides:n,hasChanges:d||r})}catch(g){console.error("[CONTENT] Error sending slides:",g)}};t.onMessage.addListener(r=>{console.log("[CONTENT] Received message from background:",r),r.type==="get-slides"&&(console.log("[CONTENT] Content script received get-slides request from background (responding to maintain health connection)."),l())}),console.log("[CONTENT] Message listeners set up, connection established"),setTimeout(()=>{console.log("[CONTENT] Sending initial slide data..."),l(!0)},1e3),S(l)}catch(l){console.error("[CONTENT] Failed to connect to background:",l)}};e(),document.readyState==="loading"?(console.log("[CONTENT] Document still loading, waiting for DOMContentLoaded"),document.addEventListener("DOMContentLoaded",()=>{console.log("[CONTENT] DOMContentLoaded fired")})):console.log("[CONTENT] Document already loaded"),setTimeout(()=>{console.log("[CONTENT] Delayed extraction after 2 seconds:"),O()},2e3)}
