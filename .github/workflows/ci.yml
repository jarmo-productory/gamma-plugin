name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Cache node modules and build
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
          ${{ github.workspace }}/packages/web/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-nextjs-

    - name: Install dependencies
      run: npm ci
      
    - name: Check for build artifacts in Git (Sprint 18 safeguard)
      run: |
        echo "üîç Checking for accidentally committed build artifacts..."
        # Use -q to test for matches; avoid pipelines in the condition
        if git ls-files | grep -E -q "(packages/extension/dist/|packages/web/\.next/|backup/)"; then
          echo "‚ùå FAIL: Build artifacts or backup directories found in Git!"
          echo "These should be in .gitignore and not committed (showing up to 200):"
          git ls-files | grep -E "(packages/extension/dist/|packages/web/\.next/|backup/)" | sed -n '1,200p'
          exit 1
        else
          echo "‚úÖ PASS: No build artifacts found in Git"
        fi
      
    # Type check temporarily skipped for web-next migration
    # TODO: Re-enable after fixing module resolution in web-next
    # - name: Type check
    #   run: npm run type-check
      
    # - name: Lint check
    #   run: npm run lint
    #   continue-on-error: true
      
    # - name: Format check
    #   run: npm run format:check
    #   continue-on-error: true
      
    # Extension build temporarily disabled - focus on web deployment
    # - name: Build extension
    #   run: npm run build:extension
      
    - name: Install Web dependencies
      run: cd packages/web && rm -rf node_modules package-lock.json && npm install
      
    - name: Build Web app
      run: cd packages/web && npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    
    - name: Guard - Block Clerk Dependencies (code only)
      run: |
        echo "üîç Scanning code paths for Clerk usage..."
        PATHS="packages src"
        if grep -R "@clerk\|CLERK_\|ClerkProvider\|auth.third_party.clerk" $PATHS \
          --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=dist --exclude-dir=.next; then
          echo "‚ùå ERROR: Clerk dependencies detected in code paths"
          exit 1
        else
          echo "‚úÖ PASS: No Clerk dependencies found in code"
        fi

    - name: Guard - Block service-role usage in user routes
      run: |
        if rg -n "createServiceRoleClient\(" packages/web/src/app/api | rg -v "/debug/|/admin/|/test-|/migrate/"; then
          echo "‚ùå ERROR: Service-role client used in user-facing API routes. Use SSR client or SECURITY DEFINER RPCs."
          exit 1
        else
          echo "‚úÖ PASS: No service-role usage in user-facing routes"
        fi
      
    - name: Build shared library
      run: npm run build:shared

  deploy:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Web dependencies
      run: cd packages/web && rm -rf node_modules package-lock.json && npm install
      
    - name: Write commit SHA for health endpoint
      run: echo "${{ github.sha }}" > packages/web/COMMIT_SHA
      
    - name: Build Web app for production
      run: cd packages/web && npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      
    - name: Deploy to Netlify
      id: netlify-deploy
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './packages/web/.next'
        production-branch: main
        production-deploy: true
        deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: false
        enable-commit-status: true
        overwrites-pull-request-comment: false
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: 9652d33b-9bc4-4c79-8d8f-702cf4dbe787
      timeout-minutes: 5
      
    - name: Print deployment URL
      run: |
        echo "‚úÖ Deployed to Netlify!"
        echo "üåê Production URL: ${{ steps.netlify-deploy.outputs.deploy-url }}"
        echo "üìä Deploy logs: ${{ steps.netlify-deploy.outputs.logs-url }}"

  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for deployment to propagate
      run: sleep 30
      
    - name: Run health check
      run: |
        chmod +x scripts/health-check.sh
        ./scripts/health-check.sh

    - name: Install dependencies for performance monitoring
      run: sudo apt-get update && sudo apt-get install -y jq bc

    - name: Performance monitoring
      run: |
        chmod +x scripts/performance-monitor.sh
        ./scripts/performance-monitor.sh
      env:
        SITE_URL: https://productory-powerups.netlify.app
      
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Production health check failed!"
        echo "Site: https://productory-powerups.netlify.app"
        echo "Admin: https://app.netlify.com/projects/productory-powerups"
