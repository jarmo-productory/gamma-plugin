console.log("[CONTENT] Script loaded on:",window.location.href);function y(o,n){let t;return function(...e){clearTimeout(t),t=window.setTimeout(()=>o(...e),n)}}function C(){console.log("[CONTENT] extractSlides() called");const o=[],n=new Set,t=document.querySelectorAll("div.card-wrapper[data-card-id]");if(console.log("[CONTENT] Found card wrappers with data-card-id:",t.length),t.length===0){console.log("[CONTENT] No card-wrapper elements found, trying alternative selectors...");const e=document.querySelectorAll("[data-card-id]");console.log("[CONTENT] Elements with data-card-id:",e.length);const s=document.querySelectorAll('.card, .slide, [class*="card"], [class*="slide"]');console.log("[CONTENT] Slide-like elements:",s.length),e.length>0&&(console.log("[CONTENT] Sample card element:",e[0]),console.log("[CONTENT] Sample card classes:",e[0].className),console.log("[CONTENT] Sample card parent:",e[0].parentElement)),console.log("[CONTENT] Document body classes:",document.body.className),console.log("[CONTENT] Looking for gamma-specific selectors...");const c=document.querySelectorAll('[class*="gamma"], [id*="gamma"], [data-*="gamma"]');console.log("[CONTENT] Gamma-related elements:",c.length)}return console.log("[CONTENT] Document body:",document.body),console.log("[CONTENT] All divs with data-card-id:",document.querySelectorAll("[data-card-id]").length),console.log("[CONTENT] All elements with class card-wrapper:",document.querySelectorAll(".card-wrapper").length),t.length===0&&(console.log("[CONTENT] No slides found. Let me check what IS in the DOM:"),console.log("[CONTENT] Body innerHTML (first 1000 chars):",document.body.innerHTML.substring(0,1e3)),console.log("[CONTENT] All iframes:",document.querySelectorAll("iframe")),window!==window.top?(console.log("[CONTENT] We are inside an iframe"),console.log("[CONTENT] Frame URL:",window.location.href),console.log("[CONTENT] Parent URL:",document.referrer)):console.log("[CONTENT] We are in the main window")),t.forEach((e,s)=>{var c;try{const a=e.getAttribute("data-card-id");if(!a||n.has(a))return;n.add(a);const O=parseInt(e.getAttribute("data-card-depth")||"0",10),d=e.querySelector('.node-heading .heading [data-node-view-content-inner="heading"]'),f=d&&((c=d.textContent)==null?void 0:c.trim())||"",i=[];e.querySelectorAll(".node-paragraph, .node-image, .node-link, .node-list").forEach(l=>{var g;if(l.classList.contains("node-paragraph"))i.push({type:"paragraph",text:((g=l.textContent)==null?void 0:g.trim())||"",subItems:[]});else if(l.classList.contains("node-image")){const r=l.querySelector("img");r&&r.src&&i.push({type:"image",text:r.src,subItems:[]})}else if(l.classList.contains("node-link")){const r=l.querySelector("a");r&&r.href&&i.push({type:"link",text:r.href,subItems:[]})}else l.classList.contains("node-list")&&l.querySelectorAll('div[data-node-view-content-inner="list-item"]').forEach(m=>{var h,p;const T=((p=(h=m.childNodes[0])==null?void 0:h.textContent)==null?void 0:p.trim())||"",u=[],N=m.querySelector('div[data-node-view-content-inner="list"]');N&&N.querySelectorAll('div[data-node-view-content-inner="list-item"]').forEach(w=>{var E;u.push(((E=w.textContent)==null?void 0:E.trim())||"")}),T&&i.push({type:"list_item",text:T,subItems:u})})}),o.push({id:a,title:f,content:i,order:s,level:O,presentationUrl:window.location.href})}catch(a){console.error(`Error processing slide ${s}:`,a)}}),o}function b(o){console.log("[CONTENT] Setting up MutationObserver");const n=y(()=>{console.log("[CONTENT] DOM change detected, re-sending slides."),o()},250);new MutationObserver(e=>{n()}).observe(document.body,{childList:!0,subtree:!0,attributes:!0,characterData:!0})}if(window.location.hostname.endsWith("gamma.app")){console.log("[CONTENT] On gamma.app, initializing...");let o=null,n;const t=()=>{try{o=chrome.runtime.connect({name:"content-script"}),console.log("[CONTENT] Port created:",o),o.onDisconnect.addListener(()=>{console.error("[CONTENT] Disconnected from background:",chrome.runtime.lastError),o=null,n||(n=window.setTimeout(()=>{console.log("[CONTENT] Attempting to reconnect..."),n=void 0,t()},2e3))});const e=()=>{if(!o){console.error("[CONTENT] No port available, cannot send slides");return}const s=C();console.log("[CONTENT] Sending slides to background:",s.length,"slides");try{o.postMessage({type:"slide-data",slides:s})}catch(c){console.error("[CONTENT] Error sending slides:",c)}};o.onMessage.addListener(s=>{console.log("[CONTENT] Received message from background:",s),s.type==="get-slides"&&(console.log("[CONTENT] Content script received get-slides request from background."),e())}),console.log("[CONTENT] Message listeners set up, connection established"),setTimeout(()=>{console.log("[CONTENT] Sending initial slide data..."),e()},1e3),b(e)}catch(e){console.error("[CONTENT] Failed to connect to background:",e)}};t(),document.readyState==="loading"?(console.log("[CONTENT] Document still loading, waiting for DOMContentLoaded"),document.addEventListener("DOMContentLoaded",()=>{console.log("[CONTENT] DOMContentLoaded fired")})):console.log("[CONTENT] Document already loaded"),setTimeout(()=>{console.log("[CONTENT] Delayed extraction after 2 seconds:"),C()},2e3)}
