console.log("[CONTENT] Script loaded on:",window.location.href);function w(t,r){let n;return function(...e){const l=this;clearTimeout(n),n=window.setTimeout(()=>t.apply(l,e),r)}}function d(){console.log("[CONTENT] extractSlides() called");const t=[],r=new Set,n=document.querySelectorAll("div.card-wrapper[data-card-id]");if(console.log("[CONTENT] Found card wrappers with data-card-id:",n.length),n.length===0){console.log("[CONTENT] No card-wrapper elements found, trying alternative selectors...");const e=document.querySelectorAll("[data-card-id]");console.log("[CONTENT] Elements with data-card-id:",e.length);const l=document.querySelectorAll('.card, .slide, [class*="card"], [class*="slide"]');console.log("[CONTENT] Slide-like elements:",l.length),e.length>0&&(console.log("[CONTENT] Sample card element:",e[0]),console.log("[CONTENT] Sample card classes:",e[0].className),console.log("[CONTENT] Sample card parent:",e[0].parentElement)),console.log("[CONTENT] Document body classes:",document.body.className),console.log("[CONTENT] Looking for gamma-specific selectors...");const s=document.querySelectorAll('[class*="gamma"], [id*="gamma"], [data-*="gamma"]');console.log("[CONTENT] Gamma-related elements:",s.length)}return console.log("[CONTENT] Document body:",document.body),console.log("[CONTENT] All divs with data-card-id:",document.querySelectorAll("[data-card-id]").length),console.log("[CONTENT] All elements with class card-wrapper:",document.querySelectorAll(".card-wrapper").length),n.length===0&&(console.log("[CONTENT] No slides found. Let me check what IS in the DOM:"),console.log("[CONTENT] Body innerHTML (first 1000 chars):",document.body.innerHTML.substring(0,1e3)),console.log("[CONTENT] All iframes:",document.querySelectorAll("iframe")),window!==window.top?(console.log("[CONTENT] We are inside an iframe"),console.log("[CONTENT] Frame URL:",window.location.href),console.log("[CONTENT] Parent URL:",document.referrer)):console.log("[CONTENT] We are in the main window")),n.forEach((e,l)=>{var s;try{const o=e.getAttribute("data-card-id");if(!o||r.has(o))return;r.add(o);const O=parseInt(e.getAttribute("data-card-depth")||"0",10),g=e.querySelector('.node-heading .heading [data-node-view-content-inner="heading"]'),y=g&&((s=g.textContent)==null?void 0:s.trim())||"",i=[];e.querySelectorAll(".node-paragraph, .node-image, .node-link, .node-list").forEach(a=>{var m;if(a.classList.contains("node-paragraph"))i.push({type:"paragraph",text:((m=a.textContent)==null?void 0:m.trim())||"",subItems:[]});else if(a.classList.contains("node-image")){const c=a.querySelector("img");c&&c.src&&i.push({type:"image",text:c.src,subItems:[]})}else if(a.classList.contains("node-link")){const c=a.querySelector("a");c&&c.href&&i.push({type:"link",text:c.href,subItems:[]})}else a.classList.contains("node-list")&&a.querySelectorAll('div[data-node-view-content-inner="list-item"]').forEach(T=>{var f,h;const u=((h=(f=T.childNodes[0])==null?void 0:f.textContent)==null?void 0:h.trim())||"",N=[],p=T.querySelector('div[data-node-view-content-inner="list"]');p&&p.querySelectorAll('div[data-node-view-content-inner="list-item"]').forEach(b=>{var E;N.push(((E=b.textContent)==null?void 0:E.trim())||"")}),u&&i.push({type:"list_item",text:u,subItems:N})})}),t.push({id:o,title:y,content:i,order:l,level:O})}catch(o){console.error(`Error processing slide ${l}:`,o)}}),t}function C(){console.log("[CONTENT] Setting up MutationObserver");const t=w(()=>{const n=d();console.log("Re-extracting slides due to DOM change:",n)},500);new MutationObserver(n=>{let e=!1;for(const l of n)if(l.type==="childList"){const s=o=>o instanceof HTMLElement&&o.matches("div.card-wrapper[data-card-id]");for(const o of Array.from(l.addedNodes))if(s(o)||o instanceof HTMLElement&&o.querySelector("div.card-wrapper[data-card-id]")){console.log("Relevant card added:",o),e=!0;break}if(e)break;for(const o of Array.from(l.removedNodes))if(s(o)){console.log("Relevant card removed:",o),e=!0;break}if(e)break}e&&t()}).observe(document.body,{childList:!0,subtree:!0})}if(window.location.hostname.endsWith("gamma.app")){console.log("[CONTENT] On gamma.app, initializing...");let t=null,r;const n=()=>{try{t=chrome.runtime.connect({name:"content-script"}),console.log("[CONTENT] Port created:",t),t.onDisconnect.addListener(()=>{console.error("[CONTENT] Disconnected from background:",chrome.runtime.lastError),t=null,r||(r=window.setTimeout(()=>{console.log("[CONTENT] Attempting to reconnect..."),r=void 0,n()},2e3))});const e=()=>{if(!t){console.error("[CONTENT] No port available, cannot send slides");return}const s=d();console.log("[CONTENT] Sending slides to background:",s.length,"slides");try{t.postMessage({type:"slide-data",slides:s})}catch(o){console.error("[CONTENT] Error sending slides:",o)}};t.onMessage.addListener(s=>{console.log("[CONTENT] Received message from background:",s),s.type==="get-slides"&&(console.log("[CONTENT] Content script received get-slides request from background."),e())}),console.log("[CONTENT] Message listeners set up, connection established"),setTimeout(()=>{console.log("[CONTENT] Sending initial slide data..."),e()},1e3);const l=setInterval(()=>{t?(console.log("[CONTENT] Periodic slide update..."),e()):(console.log("[CONTENT] No port available for periodic update"),clearInterval(l))},5e3)}catch(e){console.error("[CONTENT] Failed to connect to background:",e)}};n(),document.readyState==="loading"?(console.log("[CONTENT] Document still loading, waiting for DOMContentLoaded"),document.addEventListener("DOMContentLoaded",()=>{console.log("[CONTENT] DOMContentLoaded fired"),C()})):(console.log("[CONTENT] Document already loaded"),C()),setTimeout(()=>{console.log("[CONTENT] Delayed extraction after 2 seconds:"),d()},2e3)}
