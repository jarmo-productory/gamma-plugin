const l={enableCloudSync:!1,syncDebounceMs:500,maxRetries:3,dataVersion:1};class i{constructor(e={}){this.syncQueue=[],this.config={...l,...e}}async save(e,t){try{const n={version:this.config.dataVersion,data:t,timestamp:new Date,presentation_url:this.extractPresentationUrl(e)};await this.chromeStorageSave(e,n),this.config.enableCloudSync&&this.addToSyncQueue(e,t,"save")}catch(n){throw console.error("[StorageManager] Save failed:",n),n}}async load(e){try{const t=await this.chromeStorageLoad(e);if(!t)return;if(!this.isVersionedData(t))return console.log("[StorageManager] Loading legacy data for key:",e),t;const n=t;return n.version!==this.config.dataVersion&&console.log(`[StorageManager] Data version mismatch for key ${e}: ${n.version} vs ${this.config.dataVersion}`),n.data}catch(t){throw console.error("[StorageManager] Load failed:",t),t}}async remove(e){try{await this.chromeStorageRemove(e),this.config.enableCloudSync&&this.addToSyncQueue(e,null,"remove")}catch(t){throw console.error("[StorageManager] Remove failed:",t),t}}async clear(){try{await this.chromeStorageClear(),this.syncQueue=[]}catch(e){throw console.error("[StorageManager] Clear failed:",e),e}}chromeStorageSave(e,t){return new Promise((n,r)=>{chrome.storage.local.set({[e]:t},()=>{if(chrome.runtime.lastError)return r(chrome.runtime.lastError);n()})})}chromeStorageLoad(e){return new Promise((t,n)=>{chrome.storage.local.get(e,r=>{if(chrome.runtime.lastError)return n(chrome.runtime.lastError);t(r[e])})})}chromeStorageRemove(e){return new Promise((t,n)=>{chrome.storage.local.remove(e,()=>{if(chrome.runtime.lastError)return n(chrome.runtime.lastError);t()})})}chromeStorageClear(){return new Promise((e,t)=>{chrome.storage.local.clear(()=>{if(chrome.runtime.lastError)return t(chrome.runtime.lastError);e()})})}isVersionedData(e){return e&&typeof e=="object"&&"version"in e&&"data"in e&&"timestamp"in e}extractPresentationUrl(e){const t=e.match(/^timetable-(.+)$/);return t?t[1]:void 0}addToSyncQueue(e,t,n){const r={key:e,data:t,operation:n,timestamp:new Date,attempts:0};this.syncQueue.push(r),this.scheduleSyncProcess()}scheduleSyncProcess(){this.syncTimer&&clearTimeout(this.syncTimer),this.syncTimer=setTimeout(()=>{this.processSyncQueue()},this.config.syncDebounceMs)}async processSyncQueue(){if(!(!this.config.enableCloudSync||this.syncQueue.length===0)){console.log(`[StorageManager] Processing sync queue: ${this.syncQueue.length} items`);for(const e of this.syncQueue)console.log("[StorageManager] Sync queue item:",e);this.syncQueue=[]}}getSyncQueueStatus(){return{count:this.syncQueue.length,items:[...this.syncQueue]}}updateConfig(e){this.config={...this.config,...e}}}const c=new i;function m(a,e){return c.save(a,e)}function y(a){return c.load(a)}function S(a,e){let t;return function(...n){const r=this;clearTimeout(t),t=setTimeout(()=>a.apply(r,n),e)}}class u{constructor(e){this.listeners=new Set,this.storage=e||new i}async isAuthenticated(){return!1}async getCurrentUser(){return null}async getAuthState(){return{isAuthenticated:!1,user:null,session:null,lastChecked:new Date().toISOString()}}async login(){console.log("[AuthManager] Login called - Sprint 0 stub (no-op)")}async logout(){console.log("[AuthManager] Logout called - Sprint 0 stub (no-op)")}async checkSessionStatus(){return!1}async getUserPreferences(){const e={theme:"auto",autoSync:!1,syncInterval:30,exportFormat:"xlsx",notifications:!1};try{const t=await this.storage.load("user_preferences");if(t&&typeof t=="object")return{...e,...t}}catch(t){console.warn("[AuthManager] Could not load user preferences:",t)}return e}async updateUserPreferences(e){try{const n={...await this.getUserPreferences(),...e};await this.storage.save("user_preferences",n),this.emitAuthEvent({type:"auth_check",timestamp:new Date().toISOString()})}catch(t){throw console.error("[AuthManager] Could not update user preferences:",t),t}}addEventListener(e){this.listeners.add(e)}removeEventListener(e){this.listeners.delete(e)}emitAuthEvent(e){this.listeners.forEach(t=>{try{t(e)}catch(n){console.error("[AuthManager] Error in auth event listener:",n)}})}async initialize(){console.log("[AuthManager] Initializing - Sprint 0 stub (offline mode)"),this.emitAuthEvent({type:"auth_check",timestamp:new Date().toISOString()})}requiresAuth(e){return!1}getUIAuthStatus(){return{status:"offline",message:"Working offline",showAuthUI:!1}}}const v=new u,f={authentication:!1,userProfiles:!1,sessionManagement:!1,cloudSync:!1,autoSync:!1,syncQueue:!1,conflictResolution:!1,realTimeSync:!1,collaborativeEditing:!1,liveUpdates:!1,advancedSearch:!1,dataVersioning:!1,exportHistory:!1,bulkOperations:!1,offlineMode:!0,localStorage:!0,exportFeatures:!0,basicUI:!0,debugMode:!1,loggingEnabled:!0,performanceMetrics:!1},g={environment:"production",enableAnalytics:!1,logLevel:"info",maxStorageSize:50,syncIntervalMs:3e4},h={theme:"auto",language:"en",exportFormat:"xlsx",notifications:!1,autoSave:!0,syncOnStartup:!1};class d{constructor(e){this.config=null,this.listeners=new Set,this.storage=e||new i}async initialize(){try{const e=await this.storage.load("app_config");e&&this.isValidConfig(e)?(this.config=e,console.log("[ConfigManager] Loaded existing configuration")):(this.config=this.createDefaultConfig(),await this.saveConfig(),console.log("[ConfigManager] Created default configuration")),this.notifyListeners()}catch(e){console.error("[ConfigManager] Failed to initialize:",e),this.config=this.createDefaultConfig()}}getConfig(){return this.config?{...this.config}:this.createDefaultConfig()}isFeatureEnabled(e){return this.getConfig().features[e]||!1}async updateFeatureFlags(e){const t=this.getConfig(),n={},r=["debugMode","loggingEnabled","performanceMetrics"];for(const[s,o]of Object.entries(e))r.includes(s)&&typeof o=="boolean"?n[s]=o:r.includes(s)?console.warn(`[ConfigManager] Feature '${s}' must be boolean value`):console.warn(`[ConfigManager] Feature '${s}' cannot be modified in Sprint 0`);t.features={...t.features,...n},t.lastUpdated=new Date().toISOString(),this.config=t,await this.saveConfig(),this.notifyListeners()}async updateUserConfig(e){const t=this.getConfig();t.user={...t.user,...e},t.lastUpdated=new Date().toISOString(),this.config=t,await this.saveConfig(),this.notifyListeners()}async updateEnvironmentConfig(e){const t=this.getConfig(),n={},r=["logLevel","maxStorageSize","enableAnalytics","syncIntervalMs"];for(const[s,o]of Object.entries(e))r.includes(s)?n[s]=o:console.warn(`[ConfigManager] Environment setting '${s}' cannot be modified in Sprint 0`);t.environment={...t.environment,...n},t.lastUpdated=new Date().toISOString(),this.config=t,await this.saveConfig(),this.notifyListeners()}getUIFeatureStatus(){const e=this.getConfig(),t={};for(const[n,r]of Object.entries(e.features)){let s=r?"Feature enabled":"Feature disabled";r||(["authentication","userProfiles","sessionManagement"].includes(n)?s="Available in Sprint 1":["cloudSync","autoSync","syncQueue","conflictResolution"].includes(n)?s="Available in Sprint 2":["realTimeSync","collaborativeEditing","liveUpdates"].includes(n)?s="Available in Sprint 3":["advancedSearch","dataVersioning","exportHistory","bulkOperations"].includes(n)&&(s="Available in Sprint 4")),t[n]={enabled:r,reason:s}}return t}addConfigListener(e){this.listeners.add(e)}removeConfigListener(e){this.listeners.delete(e)}async resetToDefaults(){this.config=this.createDefaultConfig(),await this.saveConfig(),this.notifyListeners(),console.log("[ConfigManager] Configuration reset to defaults")}getFeatureConfig(e){const t=this.getConfig();return{storage:{maxSize:t.environment.maxStorageSize,enableSync:t.features.cloudSync,localOnly:!t.features.cloudSync},auth:{enabled:t.features.authentication,sessionTimeout:36e5,requireAuth:!1},sync:{enabled:t.features.autoSync,interval:t.environment.syncIntervalMs,queueEnabled:t.features.syncQueue},ui:{theme:t.user.theme,language:t.user.language,notifications:t.user.notifications},export:{enabled:t.features.exportFeatures,defaultFormat:t.user.exportFormat,historyEnabled:t.features.exportHistory}}[e]||null}createDefaultConfig(){return{features:{...f},environment:{...g},user:{...h},version:"0.0.7",lastUpdated:new Date().toISOString()}}async saveConfig(){if(this.config)try{await this.storage.save("app_config",this.config)}catch(e){throw console.error("[ConfigManager] Failed to save configuration:",e),e}}isValidConfig(e){return e&&typeof e=="object"&&e.features&&e.environment&&e.user&&e.version&&e.lastUpdated}notifyListeners(){this.config&&this.listeners.forEach(e=>{try{e(this.config)}catch(t){console.error("[ConfigManager] Error in config listener:",t)}})}}const p=new d;export{v as a,p as c,S as d,y as l,m as s};
